// Generated by CoffeeScript 1.10.0
(function() {
  var ControlledRobot, Robot, canvas, h, rect, robot, target, target2,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  h = 0.1;

  Robot = (function() {
    function Robot(L, canvasObj) {
      this.L = L;
      this.canvasObj = canvasObj;
      this.randomizePosition();
      this.render();
    }

    Robot.prototype.randomizePosition = function() {
      this.x = Math.random() * 600;
      this.y = Math.random() * 400;
      return this.theta = Math.random() * 2 * Math.PI;
    };

    Robot.prototype.update = function(controlV, controlGamma) {
      this.x += controlV * Math.cos(this.theta) * Math.cos(controlGamma) * h;
      this.y += controlV * Math.sin(this.theta) * Math.cos(controlGamma) * h;
      return this.theta += Math.atan2(Math.sin(controlV * controlGamma), this.L) * h;
    };

    Robot.prototype.render = function() {
      this.canvasObj.setAngle(this.theta * 180 / Math.PI).set({
        originX: 'center',
        originY: 'center',
        left: this.x,
        top: this.y
      });
      return canvas.renderAll();
    };

    return Robot;

  })();

  ControlledRobot = (function(superClass) {
    extend(ControlledRobot, superClass);

    function ControlledRobot(L, canvasObj, vPropControl, gammaPropControl) {
      this.L = L;
      this.canvasObj = canvasObj;
      this.vPropControl = vPropControl;
      this.gammaPropControl = gammaPropControl;
      ControlledRobot.__super__.constructor.call(this, this.L, this.canvasObj);
    }

    ControlledRobot.prototype.update = function(goalX, goalY) {
      var controlGamma, controlV, desiredDirection;
      controlV = this.vPropControl * Math.sqrt(Math.pow(this.x - goalX, 2) + Math.pow(this.y - goalY, 2));
      desiredDirection = Math.atan2(goalY - this.y, goalX - this.x);
      controlGamma = -this.gammaPropControl * ((this.theta - desiredDirection) % (2 * Math.PI));
      return ControlledRobot.__super__.update.call(this, controlV, controlGamma);
    };

    return ControlledRobot;

  })(Robot);

  canvas = new fabric.Canvas('cvs').setHeight(400).setWidth(600);

  rect = new fabric.Rect({
    width: 30,
    height: 20
  });

  target = new fabric.Circle({
    left: 90,
    top: 90,
    radius: 10,
    fill: 'crimson'
  });

  target2 = new fabric.Circle({
    left: 95,
    top: 95,
    radius: 5,
    fill: 'black'
  });

  robot = new ControlledRobot(1, rect, 0.05, 0.1);

  canvas.add(rect, target, target2);

  setInterval(function() {
    robot.update(100, 100);
    return robot.render();
  }, 16);

  $('#reset').click(function() {
    return robot.randomizePosition();
  });

}).call(this);
