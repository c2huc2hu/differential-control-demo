// Generated by CoffeeScript 1.10.0
(function() {
  var ControlledRobot, L, Robot, canvas, eye, eye2, h, rect, robot, target,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  h = 0.001;

  L = 0.1;

  window.headToOrigin = true;

  Robot = (function() {
    function Robot(L1, canvasObj) {
      this.L = L1;
      this.canvasObj = canvasObj;
      this.randomizePosition();
      this.render();
    }

    Robot.prototype.randomizePosition = function() {
      this.x = Math.random() * 4 - 2;
      this.y = Math.random() * 4 - 2;
      return this.theta = Math.random() * 2 * Math.PI;
    };

    Robot.prototype.update = function(speed, angle) {
      this.x += speed * Math.cos(this.theta) * h;
      this.y += speed * Math.sin(this.theta) * h;
      return this.theta += angle;
    };

    Robot.prototype.render = function() {
      var drawLeft, drawTop;
      drawLeft = this.x * 100 + 200;
      drawTop = this.y * 100 + 200;
      this.canvasObj.setAngle(this.theta * 180 / Math.PI).set({
        originX: 'center',
        originY: 'center',
        left: drawLeft,
        top: drawTop
      });
      return canvas.renderAll();
    };

    return Robot;

  })();

  ControlledRobot = (function(superClass) {
    extend(ControlledRobot, superClass);

    function ControlledRobot(L1, canvasObj, distControl, targetControl, alignControl) {
      this.L = L1;
      this.canvasObj = canvasObj;
      this.distControl = distControl;
      this.targetControl = targetControl;
      this.alignControl = alignControl;
      this.history = [];
      ControlledRobot.__super__.constructor.call(this, this.L, this.canvasObj);
    }

    ControlledRobot.prototype.update = function(goalX, goalY, goalTheta) {
      var alignHeading, directionToGoal, dist, targetHeading;
      dist = Math.sqrt(Math.pow(this.x - goalX, 2) + Math.pow(this.y - goalY, 2));
      directionToGoal = Math.atan((goalY - this.y) / (goalX - this.x));
      targetHeading = directionToGoal - this.theta;
      alignHeading = directionToGoal - goalTheta;
      this.history.push({
        x: this.x,
        y: this.y,
        theta: this.theta
      });
      return ControlledRobot.__super__.update.call(this, this.distControl * dist, this.targetControl * targetHeading + this.alignControl * alignHeading);
    };

    ControlledRobot.prototype.followPath = function(pathFcn) {
      var anticipation, desiredTheta, desiredX, desiredY;
      anticipation = 0.1;
      desiredX = this.x + anticipation;
      desiredY = pathFcn(desiredX);
      desiredTheta = Math.atan2(desiredY - this.y, desiredX - this.x);
      return this.update(desiredX, desiredY, desiredTheta);
    };

    return ControlledRobot;

  })(Robot);

  canvas = new fabric.Canvas('cvs').setHeight(400).setWidth(400);

  target = {
    x: 0,
    y: 0,
    angle: -Math.PI / 2
  };

  rect = new fabric.Rect({
    width: 30,
    height: 20
  });

  eye = new fabric.Circle({
    left: target.x * 100 + 200 - 10,
    top: target.y * 100 + 200 - 10,
    radius: 10,
    fill: 'crimson'
  });

  eye2 = new fabric.Circle({
    left: target.x * 100 + 200 - 5,
    top: target.y * 100 + 200 - 5,
    radius: 5,
    fill: 'black'
  });

  canvas.add(rect, eye, eye2);

  robot = new ControlledRobot(L, rect, 5, 0.1, 0.1);

  setInterval(function() {
    if (headToOrigin) {
      robot.update(target.x, target.y, target.angle);
    } else {
      robot.followPath(function(x) {
        return 0.5 * Math.sin(x);
      });
    }
    return robot.render();
  }, 16);

  $('#reset').click(function() {
    return robot.randomizePosition();
  });

  $('#toggle').click(function() {
    return window.headToOrigin = !window.headToOrigin;
  });

  window.robot = robot;

}).call(this);
